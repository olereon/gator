// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bookmarks.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBookmark = `-- name: CreateBookmark :one
INSERT INTO bookmarks (id, created_at, updated_at, user_id, post_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, user_id, post_id
`

type CreateBookmarkParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	PostID    uuid.UUID
}

func (q *Queries) CreateBookmark(ctx context.Context, arg CreateBookmarkParams) (Bookmark, error) {
	row := q.db.QueryRowContext(ctx, createBookmark,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.PostID,
	)
	var i Bookmark
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.PostID,
	)
	return i, err
}

const deleteBookmark = `-- name: DeleteBookmark :exec
DELETE FROM bookmarks
WHERE user_id = $1 AND post_id = $2
`

type DeleteBookmarkParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) DeleteBookmark(ctx context.Context, arg DeleteBookmarkParams) error {
	_, err := q.db.ExecContext(ctx, deleteBookmark, arg.UserID, arg.PostID)
	return err
}

const getBookmarksForUser = `-- name: GetBookmarksForUser :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.url, posts.description, posts.published_at, posts.feed_id, feeds.name AS feed_name, bookmarks.created_at AS bookmarked_at
FROM bookmarks
INNER JOIN posts ON bookmarks.post_id = posts.id
INNER JOIN feeds ON posts.feed_id = feeds.id
WHERE bookmarks.user_id = $1
ORDER BY bookmarks.created_at DESC
LIMIT $2
`

type GetBookmarksForUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetBookmarksForUserRow struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Title        string
	Url          string
	Description  sql.NullString
	PublishedAt  sql.NullTime
	FeedID       uuid.UUID
	FeedName     string
	BookmarkedAt time.Time
}

func (q *Queries) GetBookmarksForUser(ctx context.Context, arg GetBookmarksForUserParams) ([]GetBookmarksForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookmarksForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookmarksForUserRow
	for rows.Next() {
		var i GetBookmarksForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.FeedName,
			&i.BookmarkedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByURL = `-- name: GetPostByURL :one
SELECT id, created_at, updated_at, title, url, description, published_at, feed_id FROM posts WHERE url = $1
`

func (q *Queries) GetPostByURL(ctx context.Context, url string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByURL, url)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const isPostBookmarked = `-- name: IsPostBookmarked :one
SELECT EXISTS(
    SELECT 1 FROM bookmarks
    WHERE user_id = $1 AND post_id = $2
) AS is_bookmarked
`

type IsPostBookmarkedParams struct {
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) IsPostBookmarked(ctx context.Context, arg IsPostBookmarkedParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isPostBookmarked, arg.UserID, arg.PostID)
	var is_bookmarked bool
	err := row.Scan(&is_bookmarked)
	return is_bookmarked, err
}
